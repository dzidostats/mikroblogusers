name: Check 404 IDs

on:
  workflow_dispatch:

jobs:
  check_404_job:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        worker: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: pip install requests
      - name: Run 404 checker for this worker
        run: |
          python - <<EOF
          import requests
          import time

          start_id = 1
          end_id = 100000
          workers_total = 20
          worker_id = ${ { matrix.worker } }

          delay_between_requests = 0.05

          # Wyznacz zakres dla tego joba
          total_ids = end_id - start_id + 1
          chunk_size = total_ids // workers_total
          chunk_start = start_id + (worker_id - 1) * chunk_size
          chunk_end = start_id + worker_id * chunk_size - 1 if worker_id < workers_total else end_id

          filename = f"404_ids_worker_{worker_id}.txt"

          with open(filename, "w") as f:
              for user_id in range(chunk_start, chunk_end + 1):
                  url = f"https://m.jbzd.com.pl/mikroblog/user/profile/{user_id}"
                  try:
                      r = requests.get(url, timeout=5)
                      if r.status_code == 404:
                          print(f"Worker {worker_id} - 404: {user_id}")
                          f.write(f"{user_id}\n")
                  except requests.RequestException:
                      pass
                  time.sleep(delay_between_requests)
          EOF
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: 404-ids-worker-${{ matrix.worker }}
          path: 404_ids_worker_${{ matrix.worker }}.txt
